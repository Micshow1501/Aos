#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>
#include <unistd.h>
int main(int argc, char *argv[]) 
{
	if (argc != 2) 
	{
		printf("Usage: %s <number_of_children>\n", argv[0]);
		return 1;
	}
	int num_children = atoi(argv[1]);
	struct rusage usage;
	int status, i;
	pid_t pid;
	for (i = 0; i < num_children; i++) 
	{
		pid = fork();
		if (pid < 0) 
		{
			perror("Fork failed");
			return 1;
		} 
		else if (pid == 0) 
		{ 	// Child process
			// Perform child's task
			sleep(1);
			exit(EXIT_SUCCESS);
		}
	}
	// Wait for all child processes to terminate
	while ((pid = wait(&status)) > 0);
	// Get resource usage statistics for all children
	if (getrusage(RUSAGE_CHILDREN, &usage) == -1) 
	{
		perror("getrusage failed");
		return 1;
	}
	// Display total cumulative time spent by children in user and kernel mode
	printf("Total user time spent by children: %ld.%06ld seconds\n", usage.ru_utime.tv_sec, usage.ru_utime.tv_usec);
	printf("Total kernel time spent by children: %ld.%06ld seconds\n", usage.ru_stime.tv_sec, usage.ru_stime.tv_usec);
	return 0;
}
