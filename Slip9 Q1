import heapq
class PuzzleNode:
    def __init__(self, state, parent=None, move=""):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = 0 if parent is None else parent.cost + 1
    def __lt__(self, other):
        return (self.cost + self.heuristic()) < (other.cost + other.heuristic())
    def __eq__(self, other):
        return self.state == other.state
    def __hash__(self):
        return hash(tuple(self.state))
    def is_goal(self):
        return self.state == (1, 2, 3, 8, 0, 4, 7, 6, 5)
 def heuristic(self):
        return sum(abs(a - b) for a, b in ((i, (i - 1) % 3 + 3 * ((i - 1) // 3)) for i in self.state if i != 0))
def get_possible_moves(state):
    zero_index = state.index(0)
    row, col = zero_index // 3, zero_index % 3
    moves = [('U', zero_index - 3), ('D', zero_index + 3), ('L', zero_index - 1), ('R', zero_index + 1)]
    return [(move, new_zero_index) for move, new_zero_index in moves if 0 <= new_zero_index <= 8]
def a_star(initial_state):
    initial_node = PuzzleNode(initial_state)
    heap = [initial_node]
    heapq.heapify(heap)
    visited = set()
    while heap:
        current_node = heapq.heappop(heap)
        if current_node.is_goal():
            return current_node
        if current_node in visited:
            continue
        visited.add(current_node)
        for move, new_zero_index in get_possible_moves(current_node.state):
            new_state = list(current_node.state)
            new_state[current_node.state.index(0)], new_state[new_zero_index] = new_state[new_zero_index], new_state[current_node.state.index(0)]
            new_node = PuzzleNode(tuple(new_state), current_node, move)
            heapq.heappush(heap, new_node)
    return None
def print_solution(solution_node):
    moves = [node.move for node in solution_node.path()[1:]] if solution_node else []
    print(" ".join(moves))

if __name__ == "__main__":
    initial_state = (1, 2, 3, 8, 0, 4, 7, 6, 5)
    solution_node = a_star(initial_state)
    print_solution(solution_node)

