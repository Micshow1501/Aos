from collections import deque
class Graph:
    def __init__(self):
        self.graph = {}
    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
       self.graph[node].append(neighbor)
def bfs(graph, start, goal):
    visited = set()
    queue = deque([[start]])
  while queue:
        path = queue.popleft()
        node = path[-1]
        if node in visited:
            continue
        neighbors = graph[node]
        for neighbor in neighbors:
            new_path = list(path)
            new_path.append(neighbor)
            queue.append(new_path)
            if neighbor == goal:
                return new_path
        visited.add(node)
    return None
graph = Graph()
graph.add_edge(1, 2)
graph.add_edge(1, 3)
graph.add_edge(2, 4)
graph.add_edge(2, 5)
graph.add_edge(3, 6)
graph.add_edge(3, 7)
graph.add_edge(4, 8)
graph.add_edge(5, 8)
initial_node = 1
goal_node = 8
result_path = bfs(graph.graph, initial_node, goal_node)
if result_path:
    print(f"BFS Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")


