#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
int kill_child = 0;
void child_handler(int signum) 
{
	if (signum == SIGHUP) 
	{
		printf("Child received SIGHUP from parent.\n");
	} 
	else if (signum == SIGINT) 
	{
		printf("Child received SIGINT from parent.\n");
	} 
	else if (signum == SIGQUIT) 
	{
		printf("My Papa has Killed me!!!\n");
		exit(EXIT_SUCCESS);
	}
}
int main() 
{
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		exit(EXIT_FAILURE);
	} 
	else if (pid == 0) 
	{ 	// Child process
		signal(SIGHUP, child_handler);
		signal(SIGINT, child_handler);
		signal(SIGQUIT, child_handler);
		while(1) 
		{
			// Child process continues running and handling signals
		}
	} 
	else 
	{
		 // Parent process
		int counter = 0;
		while (counter < 5) 
		{ 
			// Sending signals for 15 seconds (5 * 3 seconds)
			sleep(3);
			if (!kill_child) 
			{
				kill(pid, SIGHUP); // Send SIGHUP signal
			}	 
			else 
			{
				kill(pid, SIGINT); // Send SIGINT signal
			}
			counter++;
			if (counter == 5) 
			{
				kill(pid, SIGQUIT); // Send SIGQUIT signal after 15 seconds
			}
			kill_child = !kill_child;
		}
		wait(NULL); // Wait for child to terminate
	}
	return 0;
}
