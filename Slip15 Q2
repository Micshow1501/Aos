class Node:
    def __init__(self, name, children=None):
        self.name = name
        self.children = children if children else []
def iterative_deepening_dfs(root, goal):
    depth = 0
    while True:
        result = depth_limited_dfs(root, goal, depth)
        if result is not None:
            return result
        depth += 1
def depth_limited_dfs(node, goal, depth):
    return recursive_dls(node, goal, depth)
def recursive_dls(node, goal, depth):
    if depth == 0 and node.name == goal:
        return node.name
    elif depth > 0:
        for child in node.children:
            result = recursive_dls(child, goal, depth - 1)
            if result is not None:
                return result
    return None
root = Node('A', [Node('B', [Node('D'), Node('E')]), Node('C', [Node('F', [Node('G')])])])
goal_node = 'G'
result = iterative_deepening_dfs(root, goal_node)
if result is not None:
    print(f"Goal node '{goal_node}' found.")
else:
    print(f"Goal node '{goal_node}' not found.")
