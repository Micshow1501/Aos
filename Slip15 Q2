#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
void child_handler(int signum) 
{
	if (signum == SIGCHLD) 
	{
		printf("Child process has terminated.\n");
	}
}
void alarm_handler(int signum) 
{
	if (signum == SIGALRM) 
	{
		printf("Child process exceeded time limit. Killing...\n");
		kill(getpid(), SIGKILL); // Kill the current process
	}
}

int main(int argc, char *argv[]) 
{
	if (argc < 2) 
	{
		printf("Usage: %s <command>\n", argv[0]);
		return 1;
	}
	signal(SIGCHLD, child_handler);
	signal(SIGALRM, alarm_handler);
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		exit(EXIT_FAILURE);
	} 
	else if (pid == 0) 
	{ 
		// Child process
		execvp(argv[1], &argv[1]); // Execute the command
		perror("Execution failed");
		exit(EXIT_FAILURE);
	} 
	else 
	{ 
		// Parent process
		alarm(5); // Set alarm for 5 seconds
		// Wait for the child process to terminate
		wait(NULL);
		alarm(0); // Cancel the alarm
	}
	return 0;
}
